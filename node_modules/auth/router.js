const express = require("express");
const yup = require("yup");

const crypto = require("./crypto.js");

var router = express.Router();

// Yup Setup
const login_schema = yup.object().shape({
    username: yup
      .string()
      .required(),
    password: yup
      .string()
      .required()
});

const register_schema = yup.object().shape({
    email: yup
      .string()
      .email()
      .required(),
    username: yup
      .string()
      .required(),
    password: yup
      .string()
      .required()
});

const cookie_schema = yup.object().shape({
    session: yup
        .string()
        .required()
});

// Miscelaneous Methods
function get_gstring(prefix, data) {
    var result = [prefix, "?"];

    for (const [key, value] of Object.entries(data)) {
        result.push(
            encodeURIComponent(key),
            "=",
            encodeURIComponent(value),
            "&"
        );        
    }

    if (result.length > 1) result.pop();

    return result.join("");
}

async function check_session(request, response) {
    const check_result = await cookie_schema.isValid(request.cookies);

    if (!check_result) {
        response.redirect(get_gstring("/login", {}));
        return false;
    }

    const user_id = crypto.session(request.cookies.session);

    if (user_id == null) {
        response.redirect(get_gstring("/login", {
            info: "Your session expired. Please sign in again!"
        }));
        return false;
    }

    return true;
}

// Express Method Handlers

router.get("/", function (request, response) {
    check_session(request, response).then(function (valid) {
        if (valid) response.render("index");
    });
});

router.get("/login", function (request, response) {
    response.render("login", {
        csrfToken: request.csrfToken()
    });
});

router.get("/register", function (request, response) {
    response.render("register", {
        csrfToken: request.csrfToken()
    });
});

router.get("/logout", function(request, response) {
    if ("session" in request.cookies) {
        crypto.clear_session(request.cookies.session);
    }

    response.render("logout");
});

router.post("/auth/login", function(request, response) {
    var check_result = login_schema.isValid(request.body).then(function(valid) {
        if (!valid) {
            response.send({
                info: "Invalid Form Data",
                success: 0
            });
            return;
        }
        
        const username = request.body.username;

        if (!crypto.user_exists(username)) {
            response.send({
                info: "Invalid credentials",
                success: 0
            });
            return;
        }
        
        const password = request.body.password;

        const result = crypto.login(username, password);

        if (!result) {
            response.send({
                info: "Invalid credentials",
                success: 0
            });
            return;
        }

        const session = crypto.get_session(username);
        
        if (session == null) {
            response.send({
                info: "An unknown error occurred",
                success: 0
            });
            return;
        }

        response.send({
            info: "Success!",
            session: session,
            success: 1
        });
    });
})

router.post("/auth/register", function(request, response) {
    var check_result = login_schema.isValid(request.body).then(function(valid) {
        if (!valid) {
            response.send({
                info: "Invalid Form Data",
                success: 0
            });
            return;
        }
        
        const username = request.body.username;

        if (crypto.user_exists(username)) {
            response.send({
                info: "User already exists!",
                success: 0
            });
            return;
        }
        
        const password = request.body.password;

        const result = crypto.register(username, password);

        if (!result) {
            response.send({
                info: "An unknown error occurred",
                success: 0
            });
            return;
        }

        const login_result = crypto.login(username, password);

        if (!login_result) {
            response.send({
                info: "Invalid credentials",
                success: 0
            });
            return;
        }

        const session = crypto.get_session(username);
        
        if (session == null) {
            response.send({
                info: "An unknown error occurred",
                success: 0
            });
            return;
        }

        response.send({
            info: "Success!",
            session: session,
            success: 1
        });
    });
})

module.exports = router;